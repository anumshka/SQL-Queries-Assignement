CREATE TABLE Salespeople(
SNUM INT PRIMARY KEY,
SNAME VARCHAR(10) NOT NULL,
CITY VARCHAR(10) NOT NULL,
COMM INT NOT NULL
);

INSERT INTO Salespeople VALUES
(1001,'Peel','London',12),
(1002,'Serres','SanJose',13),
(1004,'Motika','London',11),
(1007,'Rifkin','Barcelona',15),
(1003,'AxelRod','NeyYork',10),
(1008,'Fran','London',25);

CREATE TABLE customers
(CNUM INT PRIMARY KEY,
 CNAME VARCHAR(10) NOT NULL,
 CITY VARCHAR(10) NOT NULL,
 RATING INT NOT NULL,
 SNUM INT REFERENCES Salespeople(SNUM)
);

INSERT INTO customers (CNUM,CNAME,CITY,RATING,SNUM) VALUES 
(2001,'Hoffman','London',100,1001),
(2002,'Giovanni','Rome',200,1003),
(2003,'Liu','SanJose',200,1002),
(2004,'Grass','Berlin',300,1002),
(2006,'Clemens','London',100,1001),
(2008,'Cisneros','SanJose',300,1007),
(2007,'Pereira','Rome',100,1004);


CREATE TABLE orders(
ONUM INT PRIMARY KEY,
AMT NUMERIC(6,2) NOT NULL,
ODATE DATE NOT NULL,
CNUM INT REFERENCES customers(CNUM),
SNUM INT REFERENCES salespeople(SNUM)
);

INSERT INTO orders VALUES
 (3001,18.69,'1990-03-10',2008,1007),
 (3003,767.19,'1990-03-10',2001,1001),
 (3002,1900.10,'1990-03-10',2007,1004),
 (3005,5160.45,'1990-03-10',2003,1002),
 (3006,1098.16,'1990-03-10',2008,1007),
 (3009,1713.23,'1990-04-10',2002,1003),
 (3007,75.75,'1990-04-10',2004,1002),
 (3008,4723.00,'1990-05-10',2006,1001),
 (3010,1309.95,'1990-06-10',2004,1002)           

--3) Find the largest order taken by each salesperson on each date.
SELECT snum,odate,MAX(amt)
FROM orders
GROUP BY snum,odate
ORDER BY snum;

 snum |   odate    |   max   
------+------------+---------
 1001 | 1990-05-10 | 4723.00
 1001 | 1990-06-10 | 9891.88
 1001 | 1990-03-10 |  767.19
 1002 | 1990-06-10 | 1309.95
 1002 | 1990-03-10 | 5160.45
 1002 | 1990-04-10 |   75.75
 1003 | 1990-04-10 | 1713.23
 1004 | 1990-03-10 | 1900.10
 1007 | 1990-03-10 | 1098.16
(9 rows)

--4) Arrange the Order table by descending customer number.
SELECT * FROM orders
ORDER BY cnum DESC;

 onum |   amt   |   odate    | cnum | snum 
------+---------+------------+------+------
 3006 | 1098.16 | 1990-03-10 | 2008 | 1007
 3001 |   18.69 | 1990-03-10 | 2008 | 1007
 3002 | 1900.10 | 1990-03-10 | 2007 | 1004
 3011 | 9891.88 | 1990-06-10 | 2006 | 1001
 3008 | 4723.00 | 1990-05-10 | 2006 | 1001
 3007 |   75.75 | 1990-04-10 | 2004 | 1002
 3010 | 1309.95 | 1990-06-10 | 2004 | 1002
 3005 | 5160.45 | 1990-03-10 | 2003 | 1002
 3009 | 1713.23 | 1990-04-10 | 2002 | 1003
 3003 |  767.19 | 1990-03-10 | 2001 | 1001
(10 rows)

--5) Find which salespeople currently have orders in the order table.
SELECT DISTINCT(snum),sname 
FROM orders NATURAL JOIN salespeople;

 snum |  sname  
------+---------
 1004 | Motika
 1003 | AxelRod
 1007 | Rifkin
 1001 | Peel
 1002 | Serres
(5 rows)

--6) List names of all customers matched with the salespeople serving them.
SELECT cnum,cname,sname
FROM salespeople JOIN customers
ON salespeople.snum = customers.snum;

cnum |  cname   |  sname  
------+----------+---------
 2001 | Hoffman  | Peel
 2002 | Giovanni | AxelRod
 2003 | Liu      | Serres
 2004 | Grass    | Serres
 2006 | Clemens  | Peel
 2008 | Cisneros | Rifkin
 2007 | Pereira  | Motika
(7 rows)

--7) Find the names and numbers of all salespeople who have more than one customer.
SELECT snum,sname
FROM salespeople
WHERE snum IN (SELECT customers.snum
FROM customers JOIN salespeople
ON customers.snum = salespeople.snum
GROUP BY customers.snum
HAVING COUNT(cnum) > 1);

 snum | sname  
------+--------
 1001 | Peel
 1002 | Serres
(2 rows)

--8) Count the orders of each of the salespeople and output the results in descending order.
SELECT salespeople.snum,SUM(AMT)
FROM  salespeople LEFT OUTER JOIN orders 
ON salespeople.snum = orders.snum
GROUP BY salespeople.snum;

 snum |   sum    
------+----------
 1003 |  1713.23
 1004 |  1900.10
 1007 |  1116.85
 1008 |         
 1002 |  6546.15
 1001 | 15382.07
(6 rows)

--9) List the customer table if and only if one or more of the customers in the Customer table are located in SanJose.
SELECT * FROM customers
WHERE exists 
(SELECT cnum FROM customers 
WHERE city = 'SanJose');

 cnum |  cname   |  city   | rating | snum 
------+----------+---------+--------+------
 2001 | Hoffman  | London  |    100 | 1001
 2002 | Giovanni | Rome    |    200 | 1003
 2003 | Liu      | SanJose |    200 | 1002
 2004 | Grass    | Berlin  |    300 | 1002
 2006 | Clemens  | London  |    100 | 1001
 2008 | Cisneros | SanJose |    300 | 1007
 2007 | Pereira  | Rome    |    100 | 1004
(7 rows)

--10) Match salespeople to customers according to what city they live in.
SELECT salespeople.snum,sname,cnum,cname
FROM customers JOIN salespeople
ON customers.city = salespeople.city;

 snum | sname  | cnum |  cname   
------+--------+------+----------
 1001 | Peel   | 2006 | Clemens
 1001 | Peel   | 2001 | Hoffman
 1002 | Serres | 2008 | Cisneros
 1002 | Serres | 2003 | Liu
 1004 | Motika | 2006 | Clemens
 1004 | Motika | 2001 | Hoffman
 1008 | Fran   | 2006 | Clemens
 1008 | Fran   | 2001 | Hoffman
(8 rows)

--11) Find all the customers in SanJose who have a rating above 200.
SELECT cnum,cname 
FROM CUSTOMERS 
WHERE rating > 200
AND city = 'SanJose';

 cnum |  cname   
------+----------
 2008 | Cisneros
(1 row)


--12) List the names and commissions of all salespeople in London.
SELECT sname,comm
FROM Salespeople
WHERE city = 'London';

sname  | comm 
--------+------
 Peel   |   12
 Motika |   11
 Fran   |   25
(3 rows)


--13) List all the orders of Salesperson Motika from the orders table.
SELECT onum
FROM orders JOIN salespeople
ON orders.snum = salespeople.snum
WHERE sname='Motika';

onum 
------
 3002
(1 row)


--14) Find all customers who booked orders on October 3. 
SELECT cnum
FROM orders
WHERE odate='1990-03-10';

 cnum 
------
 2008
 2001
 2007
 2003
 2008
(5 rows)


--15) Give the sums of the amounts from the Orders table, grouped by date, eliminating all those dates where the SUM was not at least 2000 above the maximum Amount
SELECT odate,SUM(amt)
FROM orders o1
GROUP BY odate 
HAVING SUM(amt) >
(SELECT MAX(amt)+2000
FROM orders o2
WHERE o1.odate = o2.odate);


   odate    |   sum   
------------+---------
 1990-03-10 | 8944.59
(1 row)


--16) Select all orders that had amounts that were greater than at least one of the orders from October 6. 
SELECT amt 
FROM orders
WHERE amt > 
ANY(SELECT amt FROM orders WHERE odate = '1990-06-10');

  amt   
---------
 1900.10
 5160.45
 1713.23
 4723.00
 9891.88
(5 rows)


--17) Write a query that uses the EXISTS operator to extract all salespeople who have customers with a rating of 300. 
SELECT snum,sname 
FROM salespeople 
WHERE EXISTS
(SELECT snum 
FROM customers
WHERE rating = 300 
and salespeople.snum = customers.snum );

 snum | sname  
------+--------
 1002 | Serres
 1007 | Rifkin
(2 rows)


--18) Find all customers whose cnum is 1000 above the snum of Serres. 
SELECT cnum 
FROM customers 
WHERE
cnum=1000+
(SELECT snum 
FROM salespeople
WHERE sname = 'Serres');

cnum 
------
 2002
(1 row)


--19) Give the salespeople’s commissions as percentages instead of decimal numbers. 
SELECT comm*100 AS comm
FROM salespeople;

 comm 
------
 1200
 1300
 1100
 1500
 1000
 2500
(6 rows)


--20) Find the largest order taken by each salesperson on each date, eliminating those Maximum orders, which are less than 3000. 
SELECT odate,MAX(amt)
FROM orders
GROUP BY odate
HAVING MAX(amt) < 3000;

 odate    |   max   
------------+---------
 1990-04-10 | 1713.23
(1 row)

--21) List all the largest orders for October 3, for each salesperson. 
SELECT snum,odate,MAX(amt)
FROM orders
GROUP BY snum,odate
HAVING odate='1990-10-03'
ORDER BY snum; 

snum |   odate    |   max   
------+------------+---------
 1001 | 1990-10-03 |  767.19
 1002 | 1990-10-03 | 5160.45
 1004 | 1990-10-03 | 1900.10
 1007 | 1990-10-03 | 1098.16
(4 rows)


--22) Find all customers located in cities where Serres has customers. 
SELECT cnum,cname
FROM customers
WHERE city =
(SELECT city 
FROM salespeople
WHERE sname = 'Serres');

 cnum |  cname   
------+----------
 2003 | Liu
 2008 | Cisneros
(2 rows)

--23) Select all customers with a rating above 200. 
SELECT cnum,cname
FROM customers
WHERE rating > 200;

 cnum |  cname   
------+----------
 2004 | Grass
 2008 | Cisneros
(2 rows)


--24) Count the number of salespeople currently having orders in the orders table. 
SELECT COUNT(DISTINCT(salespeople.snum)) 
FROM salespeople JOIN orders
ON salespeople.snum = orders.snum;

 count 
-------
     5
(1 row)


--25) Write a query that produces all customers serviced by salespeople with a commission above 12%. Output the customer’s name, salesperson’s name and the salesperson’s rate of commission. 
SELECT cname,sname,comm
FROM customers JOIN salespeople
ON customers.snum = salespeople.snum
WHERE comm > 12 ;

  cname   | sname  | comm 
----------+--------+------
 Liu      | Serres |   13
 Grass    | Serres |   13
 Cisneros | Rifkin |   15
(3 rows)

--26) Find salespeople who have multiple customers. 
SELECT * 
FROM salespeople
WHERE snum  IN (
   SELECT DISTINCT snum
   FROM customers c1
   WHERE EXISTS (
      SELECT * 
      FROM customers c2 
      WHERE c2.snum = c1.snum 
      AND c2.cname <> c1.cname));

 snum | sname  |  city   | comm 
------+--------+---------+------
 1001 | Peel   | London  |   12
 1002 | Serres | SanJose |   13
(2 rows)


--27) Find salespeople with customers located in their own cities. 
SELECT sname,cname 
FROM salespeople JOIN customers
ON salespeople.city = customers.city;

 sname  |  cname   
--------+----------
 Peel   | Clemens
 Peel   | Hoffman
 Serres | Cisneros
 Serres | Liu
 Motika | Clemens
 Motika | Hoffman
 Fran   | Clemens
 Fran   | Hoffman
(8 rows)


--28) Find all salespeople whose name starts with ‘P’ and fourth character is ‘I’. 
SELECT sname 
FROM salespeople
WHERE sname LIKE 'P__i%';

 sname 
-------
(0 rows)


--29) Write a query that uses a subquery to obtain all orders for the customer named ‘Cisneros’. Assume you do not know his customer number. 
SELECT COUNT(onum) 
FROM orders
WHERE cnum = 
(SELECT cnum 
FROM customers
WHERE cname = 'Cisneros');

 count 
-------
     2
(1 row)

--30) Find the largest orders for Serres and Rifkin.
SELECT snum,MAX(amt)
FROM
(SELECT * 
FROM orders
WHERE 
snum IN (SELECT snum
FROM salespeople
WHERE sname = 'Serres' 
OR sname = 'Rifkin')) AS T
GROUP BY snum;


 snum |   max   
------+---------
 1002 | 5160.45
 1007 | 1098.16
(2 rows)

--31) Sort the salespeople table in the following order: snum, sname, commission, city.
SELECT * 
FROM salespeople
ORDER BY snum,sname,comm,city;

 snum |  sname  |   city    | comm 
------+---------+-----------+------
 1001 | Peel    | London    |   12
 1002 | Serres  | SanJose   |   13
 1003 | AxelRod | NeyYork   |   10
 1004 | Motika  | London    |   11
 1007 | Rifkin  | Barcelona |   15
 1008 | Fran    | London    |   25
(6 rows)


--32) Select all customers whose names fall in between ‘A’ and ‘G’ alphabetical range.
SELECT cname 
FROM customers
WHERE cname SIMILAR TO '[A-G]%';

cname   
----------
 Giovanni
 Grass
 Clemens
 Cisneros
(4 rows)

--33) Select all the possible combinations of customers you can assign.


--34) Select all orders that are greater than the average for October 4.
SELECT onum,amt
FROM orders
WHERE amt >
(SELECT AVG(amt) 
FROM orders
WHERE odate = '1990-10-04');

onum |   amt   
------+---------
 3002 | 1900.10
 3005 | 5160.45
 3006 | 1098.16
 3009 | 1713.23
 3008 | 4723.00
 3010 | 1309.95
 3011 | 9891.88
(7 rows)

--35) Write a select command using correlated subquery that selects the names and numbers of all customers with ratings equal to the maximum for their city.
SELECT cnum,cname
FROM customers c1
WHERE 
rating = (SELECT MAX(rating) FROM customers
		 WHERE city=c1.city);

 cnum |  cname   
------+----------
 2001 | Hoffman
 2002 | Giovanni
 2004 | Grass
 2006 | Clemens
 2008 | Cisneros
(5 rows)

--36) Write a query that totals the orders for each day and places the results in descending order.
SELECT odate,SUM(amt)
FROM orders
GROUP BY odate
ORDER BY SUM(amt) DESC;

 odate    |   sum    
------------+----------
 1990-10-06 | 11201.83
 1990-10-03 |  8944.59
 1990-10-05 |  4723.00
 1990-10-04 |  1788.98
(4 rows)

--37) Write a select command that produces the rating followed by the name of each customer in SanJose.
SELECT rating,cname
FROM customers
WHERE city = 'SanJose';

rating |  cname   
--------+----------
    200 | Liu
    300 | Cisneros
(2 rows)

--38) Find all orders with amounts smaller than any amount for a customer in SanJose.
SELECT onum
FROM orders WHERE 
amt < ANY(SELECT amt
FROM customers JOIN orders
ON customers.cnum = orders.cnum
WHERE city = 'SanJose');

onum 
------
 3001
 3003
 3002
 3006
 3009
 3007
 3008
 3010
(8 rows)

--39) Find all orders with above average amounts for their customers.
SELECT * 
FROM orders o1
WHERE amt >
    (SELECT AVG(amt) FROM orders o2
     WHERE o1.cnum = o2.cnum);

onum |   amt   |   odate    | cnum | snum 
------+---------+------------+------+------
 3006 | 1098.16 | 1990-10-03 | 2008 | 1007
 3010 | 1309.95 | 1990-10-06 | 2004 | 1002
 3011 | 9891.88 | 1990-10-06 | 2006 | 1001
(3 rows)

--40) Write a query that selects the highest rating in each city.
SELECT city,MAX(rating)
FROM customers
GROUP BY city;

  city   | max 
---------+-----
 Rome    | 200
 SanJose | 300
 Berlin  | 300
 London  | 100
(4 rows)

--41) Write a query that calculates the amount of the salesperson’s commission on each order by a customer with a rating above 100.00.
SELECT amt,comm
FROM salespeople JOIN customers 
ON salespeople.snum = customers.snum
JOIN orders 
ON orders.snum = customers.snum
WHERE rating>100;

   amt   | comm 
---------+------
   18.69 |   15
 5160.45 |   13
 5160.45 |   13
 1098.16 |   15
 1713.23 |   10
   75.75 |   13
   75.75 |   13
 1309.95 |   13
 1309.95 |   13
(9 rows)


--42) Count the customers with ratings above SanJose’s average.
SELECT COUNT(cnum) FROM customers
WHERE rating >
(SELECT AVG(rating) FROM customers
WHERE city = 'SanJose');

count 
-------
     2
(1 row)


--43) Find all salespeople that are located in either Barcelona or London.
SELECT snum,sname
FROM salespeople
WHERE city = 'Barcelona'
OR city = 'London';

 snum | sname  
------+--------
 1001 | Peel
 1004 | Motika
 1007 | Rifkin
 1008 | Fran
(4 rows)


--44) Find all salespeople with only one customer.
SELECT snum,sname 
FROM salespeople
WHERE snum IN (
   SELECT DISTINCT snum
   FROM customers c1 
   WHERE NOT EXISTS (
      SELECT * FROM customers c2 
      WHERE c1.snum = c2.snum 
      AND c1.cname <> c2.cname));

 snum |  sname  
------+---------
 1004 | Motika
 1007 | Rifkin
 1003 | AxelRod
(3 rows)


--45) Write a query that joins the Customer table to itself to find all pairs or customers served by a single salesperson.


--46) Write a query that will give you all orders for more than $1000.00.
SELECT onum 
from orders
WHERE amt > 1000;

 onum 
------
 3002
 3005
 3006
 3009
 3008
 3010
 3011
(7 rows)

--47) Write a query that lists each order number followed by the name of the customer who made that order.
SELECT onum,cname
FROM orders JOIN customers
ON customers.cnum = orders.cnum;

onum |  cname   
------+----------
 3001 | Cisneros
 3003 | Hoffman
 3002 | Pereira
 3005 | Liu
 3006 | Cisneros
 3009 | Giovanni
 3007 | Grass
 3008 | Clemens
 3010 | Grass
 3011 | Clemens
(10 rows)

--48) Write a query that selects all the customers whose ratings are equal to or greater than ANY(in the SQL sense) of ‘Serres’.
SELECT cnum,cname 
FROM customers
WHERE rating >=
ANY(SELECT rating 
FROM customers JOIN salespeople
ON customers.snum = salespeople.snum
WHERE sname = 'Serres');

 cnum |  cname   
------+----------
 2002 | Giovanni
 2003 | Liu
 2004 | Grass
 2008 | Cisneros
(4 rows)


--49) Write two queries that will produce all orders taken on October 3 or October 4.
SELECT onum 
FROM orders
WHERE odate = '1990-10-04'
OR odate = '1990-10-03';

SELECT onum 
FROM orders
WHERE odate BETWEEN '1990-10-03' AND '1990-10-04';

 onum 
------
 3001
 3003
 3002
 3005
 3006
 3009
 3007
(7 rows)

--50) Find only those customers whose ratings are higher than every customer in Rome.
SELECT cnum 
FROM customers
WHERE rating > 
ALL (SELECT rating 
FROM customers
WHERE city = 'Rome');

 cnum 
------
 2004
 2008
(2 rows)

--51) Write a query on the Customers table whose output will exclude all customers with a rating<= 100.00, unless they are located in Rome.
SELECT cnum 
FROM customers
WHERE rating > 100 
OR city = 'Rome';

cnum 
------
 2002
 2003
 2004
 2008
 2007
(5 rows)


--52) Find all rows from the customer’s table for which the salesperson number is 1001.
SELECT * 
from customers
WHERE snum = 1001;

cnum |  cname  |  city  | rating | snum 
------+---------+--------+--------+------
 2001 | Hoffman | London |    100 | 1001
 2006 | Clemens | London |    100 | 1001
(2 rows)


--53) Find the total amount in orders for each salesperson where their total of amounts are greater than the amount of the largest order in the table.
SELECT snum, SUM(amt)
FROM orders
GROUP BY snum
HAVING SUM(amt) = 
(SELECT MAX(amt) FROM orders);

 snum | sum 
------+-----
(0 rows)


--54) Write a query that selects all orders save those with zeroes or NULL in the amount file.
SELECT onum 
FROM orders
WHERE amt IS NULL
OR amt = 0;

onum 
------
(0 rows)


--55) Produce all combinations of salespeople and customer names such that the former precedes the latter alphabetically, and the latter has a
--rating of less than 200.
SELECT sname,cname
 FROM customers,salespeople
 WHERE sname > cname 
 and rating < 200;

 sname  |  cname  
--------+---------
 Peel   | Hoffman
 Peel   | Clemens
 Serres | Hoffman
 Serres | Clemens
 Serres | Pereira
 Motika | Hoffman
 Motika | Clemens
 Rifkin | Hoffman
 Rifkin | Clemens
 Rifkin | Pereira
 Fran   | Clemens
(11 rows)


--56) Find all salespeople name and commission.
SELECT sname,comm 
FROM salespeople;

  sname  | comm 
---------+------
 Peel    |   12
 Serres  |   13
 Motika  |   11
 Rifkin  |   15
 AxelRod |   10
 Fran    |   25
(6 rows)

--57) Write a query that produces the names and cities of all customers with the same rating as Hoffman. Write the query using Hoffman’s cnum
--rather than his rating, so that it would still be usable if his rating is changed.

 SELECT cname,city 
 FROM customers
 WHERE rating =
 (SELECT rating 
 FROM customers 
 WHERE cname = 'Hoffman');

 cname  |  city  
---------+--------
 Hoffman | London
 Clemens | London
 Pereira | Rome
(3 rows)

 
--58) Find all salespeople for whom there are customers that follow them in alphabetical order.
 SELECT sname,cname 
 FROM customers AS c JOIN salespeople AS s
 ON c.snum = s.snum
 ORDER BY sname;

 sname  |  cname   
---------+----------
 AxelRod | Giovanni
 Motika  | Pereira
 Peel    | Hoffman
 Peel    | Clemens
 Rifkin  | Cisneros
 Serres  | Grass
 Serres  | Liu
(7 rows)
 
--59) Write a query that produces the names and ratings of all customers who have average orders.
SELECT cname,rating 
 FROM customers AS c JOIN orders AS o 
 ON c.cnum = o.cnum 
 WHERE amt =
 (SELECT AVG(amt)
 FROM orders );

cname | rating 
-------+--------
(0 rows)

--60) Find the SUM of all Amounts from the orders table.
SELECT SUM(amt) FROM orders;

 sum    
----------
 26658.40
(1 row)

--61) Write a SELECT command that produces the order number, amount, and the date from rows in the order table.
SELECT onum,amt,odate
FROM orders;

onum |   amt   |   odate    
------+---------+------------
 3001 |   18.69 | 1990-10-03
 3003 |  767.19 | 1990-10-03
 3002 | 1900.10 | 1990-10-03
 3005 | 5160.45 | 1990-10-03
 3006 | 1098.16 | 1990-10-03
 3009 | 1713.23 | 1990-10-04
 3007 |   75.75 | 1990-10-04
 3008 | 4723.00 | 1990-10-05
 3010 | 1309.95 | 1990-10-06
 3011 | 9891.88 | 1990-10-06
(10 rows)

--62) Count the number of non NULL rating fields in the Customers table (including repeats).
SELECT COUNT(rating) 
FROM customers
WHERE rating IS NOT NULL;

 count 
-------
     7
(1 row)


--63) Write a query that gives the names of both the salesperson and the customer for each order after the order number.
SELECT onum,sname,cname
FROM orders o 
JOIN customers c ON o.cnum = c.cnum
JOIN salespeople s
ON c.snum = s.snum;


 onum |  sname  |  cname   
------+---------+----------
 3001 | Rifkin  | Cisneros
 3003 | Peel    | Hoffman
 3002 | Motika  | Pereira
 3005 | Serres  | Liu
 3006 | Rifkin  | Cisneros
 3009 | AxelRod | Giovanni
 3007 | Serres  | Grass
 3008 | Peel    | Clemens
 3010 | Serres  | Grass
 3011 | Peel    | Clemens
(10 rows)


--64) List the commissions of all salespeople servicing customers in London.
SELECT DISTINCT(s.snum),comm
FROM salespeople s JOIN customers c
on s.snum = c.snum 
WHERE c.city = 'London';

 snum | comm 
------+------
 1001 |   12
(1 row)


--65) Write a query using ANY or ALL that will find all salespeople who have no customers located in their city.
SELECT snum,sname
FROM salespeople
WHERE city != ALL(SELECT city FROM customers);

 snum |  sname  
------+---------
 1007 | Rifkin
 1003 | AxelRod
(2 rows)


--66) Write a query using the EXISTS operator that selects all salespeople with customers located in their cities who are not assigned to them.
SELECT sname,cname
FROM salespeople s, customers c
WHERE s.snum != c.snum
AND EXISTS(SELECT s.city WHERE s.city = c.city);


 sname  |  cname   
--------+----------
 Serres | Cisneros
 Motika | Clemens
 Motika | Hoffman
 Fran   | Clemens
 Fran   | Hoffman
(5 rows)

--67) Write a query that selects all customers serviced by Peel or Motika. (Hint: The snum field relates the 2 tables to one another.)
SELECT cname 
FROM salespeople s JOIN customers c
ON s.snum = c.snum
WHERE s.sname IN ('Peel','Motika');

 cname  
---------
 Hoffman
 Clemens
 Pereira
(3 rows)

--68) Count the number of salespeople registering orders for each day. (If a salesperson has more than one order on a given day, he or she should
--be counted only once.)
SELECT odate,COUNT(DISTINCT(snum))
FROM orders
GROUP BY odate;

   odate    | count 
------------+-------
 1990-10-03 |     4
 1990-10-04 |     2
 1990-10-05 |     1
 1990-10-06 |     2
(4 rows)


--69) Find all orders attributed to salespeople who live in London.
SELECT onum 
FROM salespeople s JOIN orders o
ON s.snum = o.snum
WHERE city = 'London';


 onum 
------
 3003
 3002
 3008
 3011
(4 rows)


--70) Find all orders by customers not located in the same cities as their salespeople.
SELECT onum 
FROM orders o JOIN customers c
ON o.cnum = c.cnum
JOIN salespeople s
ON c.snum = s.snum
where c.city != s.city;

 onum 
------
 3001
 3002
 3006
 3009
 3007
 3010
(6 rows)

--71) Find all salespeople who have customers with more than one current order.
SELECT o.snum,o.cnum,COUNT(o.onum)
FROM salespeople s JOIN orders o
ON s.snum = o.snum
GROUP BY o.snum,o.cnum
HAVING COUNT(o.onum) > 1;

snum | cnum | count 
------+------+-------
 1007 | 2008 |     2
 1002 | 2004 |     2
 1001 | 2006 |     2
(3 rows)


--72) Write a query that extracts from the customer’s table every customer assigned to a salesperson, who is currently having at least one another
--customer(besides the customer being selected) with orders in the Orders Table.
SELECT cnum 
FROM customers c
WHERE snum IN 
(SELECT snum 
FROM orders o
WHERE o.cnum != c.cnum );

 
 cnum 
------
 2001
 2003
 2004
 2006
(4 rows)


--73) Write a query on the customer’s table that will find the highest rating in each city. Put the output in this form: for the city (city), the highest
--rating is (rating).
SELECT city AS "for the city",MAX(rating) AS "the highest rating is"
FROM customers
GROUP BY city;


 for the city | the highest rating is 
--------------+-----------------------
 Rome         |                   200
 SanJose      |                   300
 Berlin       |                   300
 London       |                   100
(4 rows)


--74) Write a query that will produce the snum values of all salespeople with orders, having amt greater than 1000 in the Orders Table(without
--repeats).
SELECT DISTINCT(o.snum)
FROM salespeople s JOIN orders o
ON s.snum = o.snum
WHERE amt > 1000;

 snum 
------
 1002
 1003
 1004
 1001
 1007
(5 rows)

--75) Write a query that lists customers in a descending order of rating. Output the rating field first, followed by the customer’s names and numbers.
SELECT rating,cname, cnum
FROM customers
ORDER BY rating DESC;

 rating |  cname   | cnum 
--------+----------+------
    300 | Grass    | 2004
    300 | Cisneros | 2008
    200 | Liu      | 2003
    200 | Giovanni | 2002
    100 | Hoffman  | 2001
    100 | Clemens  | 2006
    100 | Pereira  | 2007
(7 rows)


--76) Find the average commission for salespeople in London.
SELECT city,AVG(comm)
FROM salespeople
WHERE city = 'London'
GROUP BY city;

 city  |         avg         
--------+---------------------
 London | 16.0000000000000000
(1 row)

--77) Find all orders credited to the same salesperson who services Hoffman.(cnum 2001).
SELECT onum
FROM orders 
WHERE snum = 
(SELECT snum FROM customers WHERE cname = 'Hoffman');

 onum 
------
 3003
 3008
 3011
(3 rows)


--78) Find all salespeople whose commission is in between 0.10 and 0.12(both inclusive).
SELECT snum,sname 
FROM salespeople
WHERE COMM BETWEEN 10 AND 12;

 snum |  sname  
------+---------
 1001 | Peel
 1004 | Motika
 1003 | AxelRod
(3 rows)


--79) Write a query that will give you the names and cities of all salespeople in London with a commission above 0.10.
SELECT sname,city 
FROM salespeople
WHERE city = 'London'
AND comm > 10;

 sname  |  city  
--------+--------
 Peel   | London
 Motika | London
 Fran   | London
(3 rows)

--80) Write a query that selects each customer’s smallest order
SELECT cnum,MIN(amt)
FROM orders 
GROUP BY cnum;

 cnum |   min   
------+---------
 2003 | 5160.45
 2006 | 4723.00
 2008 |   18.69
 2002 | 1713.23
 2004 |   75.75
 2007 | 1900.10
 2001 |  767.19
(7 rows)

--81) Write a query that selects the first customer in alphabetical order whose name begins with ‘G’.
SELECT cname 
FROM customers
WHERE cname LIKE 'G%'
ORDER BY cname
LIMIT 1;

 cname   
----------
 Giovanni
(1 row)


--82) Write a query that counts the number of different non NULL city values in the customers table.
SELECT COUNT(city)
FROM customers
WHERE city IS NOT NULL;

count 
-------
     7
(1 row)


--83) Find the average amount from the Orders Table.
SELECT AVG(amt)
FROM orders;

      avg          
-----------------------
 2665.8400000000000000
(1 row)

--84) Find all customers who are not located in SanJose and whose rating is above 200.
SELECT cnum,cname FROM customers 
WHERE city != 'SanJose'
AND rating > 200;

 cnum | cname 
------+-------
 2004 | Grass
(1 row)


--85) Give a simpler way to write this query.SELECT snum, sname, city, comm FROM salespeople WHERE (comm > + 0.12 OR comm < 0.14);
--We have to basically select every comm as every comm is either > 12 or < 14
SELECT snum,sname,city,comm 
FROM salespeople;

 snum |  sname  |   city    | comm 
------+---------+-----------+------
 1001 | Peel    | London    |   12
 1002 | Serres  | SanJose   |   13
 1004 | Motika  | London    |   11
 1007 | Rifkin  | Barcelona |   15
 1003 | AxelRod | New York  |   10
 1008 | Fran    | London    |   25
(6 rows)


--86) Which salespersons attend to customers not in the city they have been assigned to?
SELECT s.snum 
FROM salespeople s JOIN customers c
ON s.snum = c.snum
WHERE s.city != c.city;

 snum 
------
 1003
 1002
 1007
 1004
(4 rows)


--87) Which salespeople get commission greater than 0.11 are serving customers rated less than 250?
SELECT DISTINCT(s.snum) 
FROM salespeople s JOIN customers c
ON s.snum = c.snum
WHERE comm > 11 AND rating < 250;

 snum 
------
 1002
 1001
(2 rows)

--88) Which salespeople have been assigned to the same city but get different commission percentages?
SELECT DISTINCT(s2.snum),s2.sname
FROM salespeople s1 JOIN salespeople s2
ON s1.city = s2.city
AND s1.sname != s2.sname
AND s1.comm != s2.comm;


 snum | sname  
------+--------
 1004 | Motika
 1001 | Peel
 1008 | Fran
(3 rows)


--89) Which salesperson has earned the maximum commission?(comm in the table as integer)
SELECT snum,sname
FROM salespeople 
WHERE comm IN
(SELECT MAX(comm) FROM salespeople);

 snum | sname 
------+-------
 1008 | Fran
(1 row)


--90) Does the customer who has placed the maximum number of orders have the maximum rating?
--Customers with max nummber of orders
SELECT cnum 
FROM orders
GROUP BY cnum
HAVING COUNT(onum) =
(SELECT MAX(cnt) FROM 
(SELECT  cnum,COUNT(onum) AS cnt 
FROM orders 
GROUP BY cnum) AS T);
--Customers with max no. of rating 
SELECT  cnum 
FROM customers 
WHERE rating =
(SELECT MAX(rating) FROM customers);


 cnum 
------
 2006
 2008
 2004
(3 rows)

 cnum 
------
 2004
 2008
(2 rows)
